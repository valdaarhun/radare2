name: CI

on: push

# python sys\meson.py --release --backend vs2019 --shared --install --prefix="%cd%\radar    e2_dist" --webui

jobs:
  # Windows
  #  windows-mingw:
  #    runs-on: windows-latest
  #    steps:
  #    - name: Checkout
  #      uses: actions/checkout@v2
  #    - name: Windows Dependencies
  #      run: |
  #        pip install meson ninja r2pipe
  #    - name: Building Radare2
  #      run: |
  #        meson --buildtype=release --prefix=$PWD\radare2_dist build
  #        ninja -C build
  #        ninja -C build install
  #    - name: Pub
  #      uses: actions/upload-artifact@v2
  #      with:
  #        path: radare2_dist/*
  build-spaces:
    name: Build spaces
    continue-on-error: true
    runs-on: ubuntu-20.04
    steps:
    #- name: XXX this is not possible with make Install from a directory with spaces
    #  run: |
    #    git config pull.rebase false
    #    git clone --depth 1 https://github.com/radareorg/radare2 "spa ces" ; cd "spa ces" ; ./sys/install.sh > /dev/null ; cd ..
    #    r2 -v
    # - name: Install to a directory with spaces using ACR/MAKE
    #  run: |
    #    git config --global pull.rebase false
    #    git clone --depth 1 https://github.com/radareorg/radare2
    #    cd radare2
    #    ./configure --prefix=/usr/local; make uninstall
    #    ./configure --prefix=/usr; make uninstall
    #    ./sys/install.sh "/usr/spa ces" > /dev/null
    #    LD_LIBRARY_PATH="/usr/spa ces/lib" PATH="/usr/spa ces/bin:$PATH" r2 -v
    #    cd ..
    - name: Build on a directory with spaces (meson only)
      run: |
        export PATH=${HOME}/.local/bin:${HOME}/Library/Python/3.9/bin:${PATH}
        sudo apt-get --assume-yes install python3-wheel python3-setuptools
        pip3 install --user meson==0.55.3 ninja==1.10.0
        git config --global pull.rebase false
        git clone --depth 1 https://github.com/radareorg/radare2 "spa ces"
        cd "spa ces"
        meson --prefix="/tmp/r 2" build > /dev/null
        ninja -C build > /dev/null
        ninja -C build install ; cd ..
        find "/tmp/r 2"
        LD_LIBRARY_PATH="/tmp/r 2/lib/x86_64-linux-gnu/" "/tmp/r 2/bin/r2" -v

  windows-dist:
    name: windows-${{ matrix.name }}
    if: contains(github.ref, 'release-')
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        name: [vs2019_static, clang_cl]
        include:
          - name: vs2019_static
            compiler: cl
            meson_options: --default-library=static -Dstatic_runtime=true
          - name: clang_cl
            compiler: clang-cl
            meson_options: --default-library=shared
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install meson ninja r2pipe
    - name: Extract r2 version
      shell: pwsh
      run: echo "##[set-output name=branch;]$( python sys\\version.py )"
      id: extract_version
    - name: Build with meson + ninja
      shell: pwsh
      run: |
        .github\vsdevenv.ps1
        meson --buildtype=release --prefix=$PWD\radare2-install build ${{ matrix.meson_options }}
        ninja -C build
        ninja -C build install
    - name: Create zip artifact
      shell: pwsh
      run: 7z a radare2-git.zip $PWD\radare2-install
    - uses: actions/upload-artifact@v2
      with:
        name: radare2-git.zip
        path: .\radare2-git.zip
    - uses: actions/checkout@v2
      with:
        repository: radareorg/radare2-win-installer
        path: ./radare2-win-installer
    - name: Create installer
      shell: pwsh
      run: iscc radare2-win-installer\radare2.iss /DRadare2Location=..\radare2-install\* /DLicenseLocation=..\COPYING.LESSER /DIcoLocation=radare2.ico /DMyAppVersion=${{ steps.extract_version.outputs.branch }}
    - uses: actions/upload-artifact@v2
      with:
        name: radare2_installer-git
        path: radare2-win-installer\Output\radare2.exe

  # LINUX
  linux-static:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Building static r2
      run: |
        cp -f dist/plugins-cfg/plugins.static.nogpl.cfg plugins.cfg
        NOLTO=1 sys/static.sh
        make -C binr/blob
        xz binr/blob/radare2
    - name: Pub
      uses: actions/upload-artifact@v2
      with:
        name: radare2-static.xz
        path: binr/blob/radare2.xz
  linux-acr-deb:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Packaging for Debian
      run: export CFLAGS="-Werror -Wno-cpp"; sys/debian.sh
    - name: Pub
      uses: actions/upload-artifact@v2
      with:
        path: dist/debian/*/*.deb
## RPM PACKAGES DISABLED
#  linux-meson-rpm:
#    runs-on: ubuntu-18.04
#    container: centos:8
#    steps:
#    - name: Checkout
#      uses: actions/checkout@v2
#    - name: Prepare Skeleton
#      run: |
#        mkdir -p SOURCES SPECS
#        cp -f dist/rpm/*spec SPECS
#        wget -O https://github.com/radareorg/radare2/archive/master/radare2-5.1.0-git.tar.gz
#    - name: rpmbuild
#      uses: robertdebock/rpmbuild-action@1.1.1
#    - name: Pub
#      uses: actions/upload-artifact@v2
#      with:
#        path: RPMS/*/*.rpm *.rpm dist/rpm/*.rpm
#  centos-meson-rpm:
#    runs-on: ubuntu-18.04
#    container: centos:8
#    steps:
#    - name: Checkout
#      uses: actions/checkout@v2
#    - name: Install tools for CentOS:8
#      run: |
#        yum install -y patch unzip git gcc make python38 python38-pip rpm-build rpmdevtools wget
#        pip3.8 install meson ninja r2pipe
#    - name: Building with Meson
#      run: |
#        meson build
#        ninja -C build
#        ninja -C build install
#    - name: RPM Packaging
#      run: |
#        cp -f dist/rpm/radare2.spec .
#        rpmdev-setuptree
#        mkdir -p rpmbuild/SOURCES
#        cd rpmbuild/SOURCES
#        wget https://github.com/radareorg/radare2/archive/5860c3efc12d4b75e72bdce4b1d3834599620913/radare2-5.1.0-git.tar.gz
#        cd -
#        rpmbuild -ba radare2.spec
#    - name: Pub
#      uses: actions/upload-artifact@v2
#      with:
#        path: rpmbuild/RPMS/*/*.rpm
  linux-asan:
    runs-on: ubuntu-latest
    if: contains(github.ref, 'release-')
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Building Radare2
      run: |
        pip install r2pipe
        sys/sanitize.sh
    - name: Running tests
      run: make tests
    - name: Run fuzz tests
      run: make -C test fuzz-tests
  linux-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Building Radare2
      run: |
        pip install r2pipe
        sys/install.sh
    - name: Running tests
      run: make tests

  # Apple
  macos-acr:
    runs-on: macos-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Packaging
      run: dist/macos/build-pkg.sh
    - name: Building Radare2
      run: sys/install.sh > /dev/null
    - name: Pub
      uses: actions/upload-artifact@v2
      with:
        path: dist/macos/*.pkg
  macos-test:
    runs-on: macos-latest
    if: contains(github.ref, 'mac-')
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Building Radare2
      run: export CFLAGS="-Werror -Wno-cpp"; sys/install.sh > /dev/null
    - name: Running tests
      run: make tests
    - name: Pub
      uses: actions/upload-artifact@v2
      with:
        path: dist/macos/*.pkg

  # Mobile
  ios-cydia:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
    - name: Extract r2 version
      shell: bash
      run: echo "##[set-output name=branch;]$(python sys/version.py)"
      id: extract_version
    - name: Install pkg-config/ldid2 with Homebrew
      run: brew install pkg-config ldid
#     - name: Create cydia32 package
#       run: ./sys/ios-cydia32.sh
#     - name: List sys/cydia
#       run: ls -lahR ./sys/cydia
#     - uses: actions/upload-artifact@v2
#       with:
#         name: radare2-arm32_${{ steps.extract_version.outputs.branch }}_iphoneos-arm
#         path: ./sys/cydia/radare2/radare2-arm32_${{ steps.extract_version.outputs.branch }}_iphoneos-arm.deb
    - name: Create cydia package
      run: ./sys/ios-cydia.sh
    - name: Create iOS SDK
      run: |
        ./sys/ios-sdk.sh
        cd /tmp/r2ios
        zip -r /tmp/r2ios-sdk.zip *
    - uses: actions/upload-artifact@v2
      with:
        name: radare2_iphoneos-arm
        path: ./sys/cydia/radare2/*.deb

  android-build:
    runs-on: ubuntu-latest
    if: contains(github.ref, 'release-')
    strategy:
      fail-fast: false
      matrix:
      #  name: [x86_64, arm, aarch64]
        name: [aarch64]
    steps:
    - uses: actions/checkout@v2
    - name: Install dependencies
      run: sudo apt-get --assume-yes install pax wget unzip python3-wheel python3-setuptools python3-pip && pip3 install --user meson ninja
    - name: Compile with meson
      run: |
        export PATH=${HOME}/.local/bin:${PATH}
        CFLAGS="-static" LDFLAGS="-static" meson --buildtype release --default-library static --prefix=/tmp/android-dir -Dblob=true build --cross-file .github/meson-android-${{ matrix.name }}.ini
        ninja -C build && ninja -C build install
    - name: Create radare2-android-${{ matrix.name }}.tar.gz
      run: |
        cd /tmp
        rm -rf android-dir/include android-dir/lib
        tar --transform 's/android-dir/data\/data\/org.radareorg.radare2installer/g' -cvf radare2-android-${{ matrix.name }}.tar.gz android-dir/
    - uses: actions/upload-artifact@v2
      with:
        name: radare2-android-${{ matrix.name }}
        path: /tmp/radare2-android-${{ matrix.name }}.tar.gz
